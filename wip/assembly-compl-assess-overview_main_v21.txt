// Fully expanded assembly

// Imploded on: 2025-06-23 16:19:32
// Git branch: main
        // include attributes via conditional logic. DONT CHANGE this.
        
        
        // modify context attribute for unique IDs in every assembly (see https://red.ht/context)
        include::{modules}/common/begin-nested-context.adoc[]
        
        // define ID as an attribute - make it succint, not a full file name, for url brevity. The attribute text below is an example:
        :id: intro-compliance
        
        // assign the ID conditionally - the logic decides whether a context is needed or not
        // follow with a level 0 header (denoted by a single equals sign)
        // the heading should be a gerund if the included modules consist mainly of procedures
        // leave a blank line after the header
        include::{modules}/common/id.adoc[]
        = Red Hat Insights compliance service overview
        
        The {PRODUCTNAME} {COMPL} service enables IT security and compliance administrators to assess, monitor, and report on the security-policy compliance of {RHELSHORT} systems.
        
        The {COMPL} service provides a simple but powerful user interface, enabling the creation, configuration, and management of SCAP security policies. With the filtering and context-adding features built in, IT security administrators can easily identify and manage security compliance issues in the RHEL infrastructure.
        
        This documentation describes some of the functionality of the {COMPL} service, to help users understand reporting, manage issues, and get the maximum value from the service.
        
        You can also create Ansible Playbooks to resolve security compliance issues and share reports with stakeholders to communicate compliance status.
        
        [role="_additional-resources"]
        .Additional Resources
        
        * {DOC-COMP-GEN-REPORTS}
        
        :context: intro-compliance
        
        // BEGIN inlined: modules/compl-assessing-monitoring-security-policy-compliance-rhel/con-compl-assess-requirements-and-prerequisites.adoc
        // include attributes via conditional logic
        
        
        // define ID as an attribute - make it succinct, not a full file name, for url brevity. The following ID is an example:
        :id: compliance-requirements-prerequisites
        
        // assign the ID conditionally - the logic decides whether a context is needed or not
        // follow with a level 0 header (denoted by a single equals sign)
        // the heading should be a gerund if the included modules consist mainly of procedures
        // leave a blank line after the header
        include::{modules}/common/id.adoc[]
        = Requirements and prerequisites
        
        The {COMPL} service is part of {PRODUCTNAME}, which is included with your Red{nbsp}Hat Enterprise Linux (RHEL) subscription and can be used with all versions of {RHELSHORT} currently supported by Red{nbsp}Hat. You do not need additional Red{nbsp}Hat subscriptions to use {PRODUCTNAMESHORT} and the {COMPL} service.
        // END inlined: modules/compl-assessing-monitoring-security-policy-compliance-rhel/con-compl-assess-requirements-and-prerequisites.adoc
        // BEGIN inlined: modules/compl-assessing-monitoring-security-policy-compliance-rhel/con-compl-assess-supported-configurations.adoc
        // include attributes via conditional logic
        
        
        // define ID as an attribute - make it succinct, not a full file name, for url brevity. The following ID is an example:
        :id: compliance-supported-configurations
        
        // assign the ID conditionally - the logic decides whether a context is needed or not
        // follow with a level 0 header (denoted by a single equals sign)
        // the heading should be a gerund if the included modules consist mainly of procedures
        // leave a blank line after the header
        include::{modules}/common/id.adoc[]
        = Supported configurations
        
        {RH} supports specific versions of the  SCAP Security Guide (SSG) for each minor version of {RHEL} ({RHELSHORT}). The rules and policies in an SSG version are only accurate for one RHEL minor version. In order to receive accurate compliance reporting, the system must have the supported SSG version installed.
        
        {RH} Enterprise Linux minor versions ship and upgrade with the supported SSG version included. However, some organizations may decide to continue using an earlier version temporarily, prior to upgrading.
        
        If a policy includes systems using unsupported SSG versions, an **unsupported** warning, preceded by the number of affected systems, is visible next to the policy in {COMPL-REP}.
        
        NOTE: For more information about which versions of the SCAP Security Guide are supported in RHEL, refer to https://access.redhat.com/articles/6644131[Insights Compliance - Supported configurations].
        
        .Example of a compliance policy with a system running an unsupported version of SSG
        image:img-compl-assess-unsupported-configuration-example.png[Shows DISA STIG for RHEL 7 policy with an alert about 1 system running an unsupported version of SCAP Security Guide]
        
        
        [id="con-compl-faq_{context}"]
        == Frequently asked questions about the compliance service
        
        .How do I interpret the SSG package name?
        Packages names look like this: `scap-security-guide-0.1.43-13.el7`. The SSG version in this case is 0.1.43; the release is 13 and architecture is el7. The release number can differ from the version number shown in the table; however, the version number must match as indicated below for it to be a supported configuration.
        
        .What if Red Hat supports more than one SSG for my {RHELSHORT} minor version?
        When more than one SSG version is supported for a {RHELSHORT}minor version, as is the case with {RHELSHORT} 7.9 and {RHELSHORT} 8.1, the compliance service will use the latest available version.
        
        .Why is my old policy no longer supported by SSG?
        As {RHELSHORT} minor versions get older, fewer SCAP profiles are supported. To view which SCAP profiles are supported, refer to https://access.redhat.com/articles/6644131[Insights Compliance - Supported configurations].
        
        .More about limitations of unsupported configurations
        The following conditions apply to the results for unsupported configurations:
        
        * These results are a “best-guess” effort because using any SSG version other than what is supported by Red Hat can lead to inaccurate results.
        +
        IMPORTANT: Although you can still see results for a system with an unsupported version of SSG installed, those results may be considered inaccurate for {COMPL} reporting purposes.
        
        * Results for systems using an unsupported version of SSG _are not included_ in the overall {COMPL} assessment for the policy.
        * Remediations are not available for rules on systems with an unsupported version of SSG installed.
        // END inlined: modules/compl-assessing-monitoring-security-policy-compliance-rhel/con-compl-assess-supported-configurations.adoc
        // BEGIN inlined: modules/compl-assessing-monitoring-security-policy-compliance-rhel/con-compl-assess-best-practices.adoc
        // include attributes via conditional logic
        
        
        // define ID as an attribute - make it succinct, not a full file name, for url brevity. The following ID is an example:
        :id: compliance-best-practices
        
        // assign the ID conditionally - the logic decides whether a context is needed or not
        // follow with a level 0 header (denoted by a single equals sign)
        // the heading should be a gerund if the included modules consist mainly of procedures
        // leave a blank line after the header
        include::{modules}/common/id.adoc[]
        = Best practices
        
        To benefit from the best user experience and receive the most accurate results in the {COMPL} service, {RH} recommends that you follow some best practices.
        
        .Ensure that the {RHELSHORT} OS system minor version is visible to the {CLIENT-NAME}
        
        If the {COMPL} service cannot see your {RHELSHORT} OS minor version, then the supported SCAP Security Guide version cannot be validated and your reporting may not be accurate. The {CLIENT-NAME} allows users to redact certain data, including {RHEL} OS minor version, from the data payload that is uploaded to {PRODUCTNAME}. This will prohibit accurate {COMPL} service reporting.
        
        To learn more about data redaction, see the following documentation: link:https://access.redhat.com/documentation/en-us/red_hat_insights/1-latest/html/client_configuration_guide_for_red_hat_insights/assembly-client-data-redaction[Red Hat Insights client data redaction].
        
        .Create security policies within the {COMPL} service
        
        Creating your organization’s security policies within the {COMPL} service allows you to:
        
        * Associate many systems with the policy. 
        * Use the supported SCAP Security Guide for your {RHELSHORT} minor version. 
        * Edit which rules are included, based on your organization’s requirements.
        // END inlined: modules/compl-assessing-monitoring-security-policy-compliance-rhel/con-compl-assess-best-practices.adoc
        // BEGIN inlined nested assembly: assemblies/rbac/assembly-rbac.adoc
    // include attributes via conditional logic. DONT CHANGE this.
    
    
    // modify context attribute for unique IDs in every assembly (see https://red.ht/context)
    include::{modules}/common/begin-nested-context.adoc[]
    
    // define ID as an attribute - make it succint, not a full file name, for url brevity. The attribute text below is an example:
    :id: insights-rbac
    
    // assign the ID conditionally - the logic decides whether a context is needed or not
    // follow with a level 0 header (denoted by a single equals sign)
    // the heading should be a gerund if the included modules consist mainly of procedures
    // leave a blank line after the header
    include::{modules}/common/id.adoc[]
    = User Access settings in the {HCC}
    
    
    User Access is the Red Hat implementation of role-based access control (RBAC). 
    Your Organization Administrator uses User Access to configure what users can see and do on the {HCC} (the console): 
    
    * Control user access by organizing roles instead of assigning permissions individually to users.
    * Create groups that include roles and their corresponding permissions.
    * Assign users to these groups, allowing them to inherit the permissions associated with their group's roles.
    
    ifdef::FEDRAMP[]
    All users on your account have access to most of the data in {PRODUCTNAMESHORT}. 
    endif::[]
    
    
    == Predefined User Access groups and roles
    To make groups and roles easier to manage, {RH} provides two predefined groups and a set of predefined roles.
    
    === Predefined groups
    
    The *Default access group* contains all users in your organization. Many predefined roles are assigned to this group. It is automatically updated by {RH}.
    
    [NOTE]
    If the {OA} makes changes to the *Default access* group its name changes to *Custom default access* group and it is no longer updated by {RH}.
    
    The *Default admin access* group contains only users who have {OA} permissions. This group is automatically maintained and users and roles in this group cannot be changed.
    
    On the {HCCSHORT} navigate to {RBAC-GROUPS} to see the current groups in your account. This view is limited to the {OA}.
    
    === Predefined roles assigned to groups
    
    The *Default access* group contains many of the predefined roles. Because all users in your organization are members of the *Default access* group, they inherit all permissions assigned to that group.
    
    The *Default admin access* group includes many (but not all) predefined roles that provide update and delete permissions. The roles in this group usually include *administrator* in their name.
    
    On the {HCCSHORT} navigate to {RBAC-ROLES} to see the current roles in your account. You can see how many groups each role is assigned to. This view is limited to the {OA}.
    
    
    == Access permissions
    
    The *Prerequisites* for each procedure list which predefined role provides the permissions you must have. 
    As a user, you can navigate to {CONSOLE-URL}/iam/my-user-access?bundle=rhel[{HCC} > {SETTINGS} > My User Access] to view the roles and application permissions currently inherited by you.
    
    If you try to access {PRODUCTNAMESHORT} features and see a message that you do not have permission to perform this action, you must obtain additional permissions. The {OA} or the User Access administrator for your organization configures those permissions.
    
    ifdef::PUBLIC[]
    Use the {HCC} Virtual Assistant to ask "Contact my {OA}". The assistant sends an email to the {OA} on your behalf.
    endif::[]
    
    
    .Additional resources
    
    For more information about user access and permissions, see {DOC-RBAC-CONFIG}.
    
    // set context for this assembly - may match id attribute, but can be distinct
    :context: insights-rbac
    
    
    
    // BEGIN conditional module: modules/rbac/con-roles-for-compliance.adoc
    // include attributes via conditional logic
    
    
    // define ID as an attribute - make it succinct, not a full file name, for url brevity. The following ID is an example:
    :id: roles-for-compliance-users
    
    // assign the ID conditionally - the logic decides whether a context is needed or not
    // follow with a level 0 header (denoted by a single equals sign)
    // the heading should be a gerund if the included modules consist mainly of procedures
    // leave a blank line after the header
    include::{modules}/common/id.adoc[]
    = User Access roles for compliance-service users
    
    The following roles enable standard or enhanced access to compliance features in {PRODUCTNAMESHORT}:
    
    * **Compliance viewer.** A compliance-service role that grants read access to any compliance resource.
    * **Compliance administrator.** A compliance-service role that grants full access to any compliance resource. If a procedure requires that you be granted the Compliance administrator role or other enhanced permissions, it will be noted in the **_Prerequisites_** for that procedure.
    // END conditional module: modules/rbac/con-roles-for-compliance.adoc
    
    
    
    
    
    
    
    // ifeval::["{parent-context}" == "ros-concepts"]
    // include::{modules}/rbac/con-roles-for-ros.adoc[leveloffset=+1]
    // endif::[]
    
    // ifeval::["{parent-context}" == "patch-service-overview"]
    // include::{modules}/rbac/con-roles-for-patch-content.adoc[leveloffset=+1]
    // endif::[]
    
    ifdef::parent-context[:context: {parent-context}]
    ifndef::parent-context[:!context:]
    
    // reset context attribute in every assembly (see https://red.ht/context)
    include::{modules}/common/end-nested-context.adoc[]
        // END inlined nested assembly: assemblies/rbac/assembly-rbac.adoc
        
        // reset context attribute in every assembly (see https://red.ht/context)
        include::{modules}/common/end-nested-context.adoc[]
